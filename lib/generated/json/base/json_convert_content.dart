// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:bee_chat/models/assets/coin_model.dart';
import 'package:bee_chat/models/assets/funds_details_record_model.dart';
import 'package:bee_chat/models/assets/funds_model.dart';
import 'package:bee_chat/models/assets/google_is_bind_model.dart';
import 'package:bee_chat/models/assets/google_qrcode_model.dart';
import 'package:bee_chat/models/assets/google_secret_key_model.dart';
import 'package:bee_chat/models/assets/payouts_address_list_model.dart';
import 'package:bee_chat/models/assets/payouts_set_model.dart';
import 'package:bee_chat/models/assets/recharge_address_model.dart';
import 'package:bee_chat/models/assets/recharge_records_model.dart';
import 'package:bee_chat/models/assets/transfer_records_model.dart';
import 'package:bee_chat/models/assets/transfer_set_model.dart';
import 'package:bee_chat/models/assets/withdrawal_records_model.dart';
import 'package:bee_chat/models/baidu_map/reverse_geocoding_result_model.dart';
import 'package:bee_chat/models/common/captcha_image_model.dart';
import 'package:bee_chat/models/common/empty_model.dart';
import 'package:bee_chat/models/common/launch_splash_model.dart';
import 'package:bee_chat/models/common/test_model.dart';
import 'package:bee_chat/models/common/upload_sign_model.dart';
import 'package:bee_chat/models/common/version_list_model.dart';
import 'package:bee_chat/models/dynamic/comments_reply_list_model.dart';
import 'package:bee_chat/models/dynamic/draft_box_list_model.dart';
import 'package:bee_chat/models/dynamic/get_posts_count_model.dart';
import 'package:bee_chat/models/dynamic/hot_top_posts_list_model.dart';
import 'package:bee_chat/models/dynamic/look_history_posts_model.dart';
import 'package:bee_chat/models/dynamic/posts_details_comments_model.dart';
import 'package:bee_chat/models/dynamic/posts_details_model.dart';
import 'package:bee_chat/models/dynamic/posts_hot_recommend_list_model.dart';
import 'package:bee_chat/models/dynamic/posts_hot_recommend_model.dart';
import 'package:bee_chat/models/dynamic/posts_reward_options_model.dart';
import 'package:bee_chat/models/group/group_list_model.dart';
import 'package:bee_chat/models/group/group_member_invite_model.dart';
import 'package:bee_chat/models/group/group_member_list_model.dart';
import 'package:bee_chat/models/im/custom_emoji_model.dart';
import 'package:bee_chat/models/im/notice_details_model.dart';
import 'package:bee_chat/models/im/notice_list_model.dart';
import 'package:bee_chat/models/im/system_message_model.dart';
import 'package:bee_chat/models/mine/collection_details_model.dart';
import 'package:bee_chat/models/mine/collection_message_list_model.dart';
import 'package:bee_chat/models/red_bag/get_red_packet_list_model.dart';
import 'package:bee_chat/models/red_bag/get_red_packet_total_model.dart';
import 'package:bee_chat/models/red_bag/is_receive_red_packet_model.dart';
import 'package:bee_chat/models/red_bag/receive_red_packet_model.dart';
import 'package:bee_chat/models/red_bag/red_packet_detail_model.dart';
import 'package:bee_chat/models/red_bag/red_packet_get_receivers_model.dart';
import 'package:bee_chat/models/red_bag/red_packet_setting_model.dart';
import 'package:bee_chat/models/red_bag/send_group_red_packet_model.dart';
import 'package:bee_chat/models/red_bag/send_single_red_packet_model.dart';
import 'package:bee_chat/models/red_bag/split_red_packet_model.dart';
import 'package:bee_chat/models/user/follow_user_list_model.dart';
import 'package:bee_chat/models/user/invite_list_model.dart';
import 'package:bee_chat/models/user/login_model.dart';
import 'package:bee_chat/models/user/member_code_model.dart';
import 'package:bee_chat/models/user/mnemonic_model.dart';
import 'package:bee_chat/models/user/user_detail_model.dart';
import 'package:bee_chat/models/user/user_list_model.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<CoinModel>[] is M) {
      return data.map<CoinModel>((Map<String, dynamic> e) => CoinModel.fromJson(e)).toList() as M;
    }
    if (<FundsDetailsRecordModel>[] is M) {
      return data.map<FundsDetailsRecordModel>((Map<String, dynamic> e) => FundsDetailsRecordModel.fromJson(e))
          .toList() as M;
    }
    if (<FundsDetailsRecordRecords>[] is M) {
      return data.map<FundsDetailsRecordRecords>((Map<String, dynamic> e) => FundsDetailsRecordRecords.fromJson(e))
          .toList() as M;
    }
    if (<FundsModel>[] is M) {
      return data.map<FundsModel>((Map<String, dynamic> e) => FundsModel.fromJson(e)).toList() as M;
    }
    if (<FundsCoinCapitalList>[] is M) {
      return data.map<FundsCoinCapitalList>((Map<String, dynamic> e) => FundsCoinCapitalList.fromJson(e)).toList() as M;
    }
    if (<GoogleIsBindModel>[] is M) {
      return data.map<GoogleIsBindModel>((Map<String, dynamic> e) => GoogleIsBindModel.fromJson(e)).toList() as M;
    }
    if (<GoogleQrcodeModel>[] is M) {
      return data.map<GoogleQrcodeModel>((Map<String, dynamic> e) => GoogleQrcodeModel.fromJson(e)).toList() as M;
    }
    if (<GoogleSecretKeyModel>[] is M) {
      return data.map<GoogleSecretKeyModel>((Map<String, dynamic> e) => GoogleSecretKeyModel.fromJson(e)).toList() as M;
    }
    if (<PayoutsAddressListModel>[] is M) {
      return data.map<PayoutsAddressListModel>((Map<String, dynamic> e) => PayoutsAddressListModel.fromJson(e))
          .toList() as M;
    }
    if (<PayoutsAddressListRecords>[] is M) {
      return data.map<PayoutsAddressListRecords>((Map<String, dynamic> e) => PayoutsAddressListRecords.fromJson(e))
          .toList() as M;
    }
    if (<PayoutsSetModel>[] is M) {
      return data.map<PayoutsSetModel>((Map<String, dynamic> e) => PayoutsSetModel.fromJson(e)).toList() as M;
    }
    if (<RechargeAddressModel>[] is M) {
      return data.map<RechargeAddressModel>((Map<String, dynamic> e) => RechargeAddressModel.fromJson(e)).toList() as M;
    }
    if (<RechargeRecordsModel>[] is M) {
      return data.map<RechargeRecordsModel>((Map<String, dynamic> e) => RechargeRecordsModel.fromJson(e)).toList() as M;
    }
    if (<RechargeRecordsRecords>[] is M) {
      return data.map<RechargeRecordsRecords>((Map<String, dynamic> e) => RechargeRecordsRecords.fromJson(e))
          .toList() as M;
    }
    if (<TransferRecordsModel>[] is M) {
      return data.map<TransferRecordsModel>((Map<String, dynamic> e) => TransferRecordsModel.fromJson(e)).toList() as M;
    }
    if (<TransferRecordsRecords>[] is M) {
      return data.map<TransferRecordsRecords>((Map<String, dynamic> e) => TransferRecordsRecords.fromJson(e))
          .toList() as M;
    }
    if (<TransferSetModel>[] is M) {
      return data.map<TransferSetModel>((Map<String, dynamic> e) => TransferSetModel.fromJson(e)).toList() as M;
    }
    if (<WithdrawalRecordsModel>[] is M) {
      return data.map<WithdrawalRecordsModel>((Map<String, dynamic> e) => WithdrawalRecordsModel.fromJson(e))
          .toList() as M;
    }
    if (<WithdrawalRecordsRecords>[] is M) {
      return data.map<WithdrawalRecordsRecords>((Map<String, dynamic> e) => WithdrawalRecordsRecords.fromJson(e))
          .toList() as M;
    }
    if (<ReverseGeocodingResultModel>[] is M) {
      return data.map<ReverseGeocodingResultModel>((Map<String, dynamic> e) => ReverseGeocodingResultModel.fromJson(e))
          .toList() as M;
    }
    if (<ReverseGeocodingResultResult>[] is M) {
      return data.map<ReverseGeocodingResultResult>((Map<String, dynamic> e) =>
          ReverseGeocodingResultResult.fromJson(e)).toList() as M;
    }
    if (<ReverseGeocodingResultResultAddressComponent>[] is M) {
      return data.map<ReverseGeocodingResultResultAddressComponent>((Map<String, dynamic> e) =>
          ReverseGeocodingResultResultAddressComponent.fromJson(e)).toList() as M;
    }
    if (<CaptchaImageModel>[] is M) {
      return data.map<CaptchaImageModel>((Map<String, dynamic> e) => CaptchaImageModel.fromJson(e)).toList() as M;
    }
    if (<EmptyModel>[] is M) {
      return data.map<EmptyModel>((Map<String, dynamic> e) => EmptyModel.fromJson(e)).toList() as M;
    }
    if (<LaunchSplashModel>[] is M) {
      return data.map<LaunchSplashModel>((Map<String, dynamic> e) => LaunchSplashModel.fromJson(e)).toList() as M;
    }
    if (<TestModel>[] is M) {
      return data.map<TestModel>((Map<String, dynamic> e) => TestModel.fromJson(e)).toList() as M;
    }
    if (<UploadSignModel>[] is M) {
      return data.map<UploadSignModel>((Map<String, dynamic> e) => UploadSignModel.fromJson(e)).toList() as M;
    }
    if (<VersionListModel>[] is M) {
      return data.map<VersionListModel>((Map<String, dynamic> e) => VersionListModel.fromJson(e)).toList() as M;
    }
    if (<CommentsReplyListModel>[] is M) {
      return data.map<CommentsReplyListModel>((Map<String, dynamic> e) => CommentsReplyListModel.fromJson(e))
          .toList() as M;
    }
    if (<CommentsReplyListRecords>[] is M) {
      return data.map<CommentsReplyListRecords>((Map<String, dynamic> e) => CommentsReplyListRecords.fromJson(e))
          .toList() as M;
    }
    if (<DraftBoxListModel>[] is M) {
      return data.map<DraftBoxListModel>((Map<String, dynamic> e) => DraftBoxListModel.fromJson(e)).toList() as M;
    }
    if (<DraftBoxListRecords>[] is M) {
      return data.map<DraftBoxListRecords>((Map<String, dynamic> e) => DraftBoxListRecords.fromJson(e)).toList() as M;
    }
    if (<GetPostsCountModel>[] is M) {
      return data.map<GetPostsCountModel>((Map<String, dynamic> e) => GetPostsCountModel.fromJson(e)).toList() as M;
    }
    if (<HotTopPostsListModel>[] is M) {
      return data.map<HotTopPostsListModel>((Map<String, dynamic> e) => HotTopPostsListModel.fromJson(e)).toList() as M;
    }
    if (<HotTopPostsListRecords>[] is M) {
      return data.map<HotTopPostsListRecords>((Map<String, dynamic> e) => HotTopPostsListRecords.fromJson(e))
          .toList() as M;
    }
    if (<LookHistoryPostsModel>[] is M) {
      return data.map<LookHistoryPostsModel>((Map<String, dynamic> e) => LookHistoryPostsModel.fromJson(e))
          .toList() as M;
    }
    if (<LookHistoryPostsRecords>[] is M) {
      return data.map<LookHistoryPostsRecords>((Map<String, dynamic> e) => LookHistoryPostsRecords.fromJson(e))
          .toList() as M;
    }
    if (<PostsDetailsCommentsModel>[] is M) {
      return data.map<PostsDetailsCommentsModel>((Map<String, dynamic> e) => PostsDetailsCommentsModel.fromJson(e))
          .toList() as M;
    }
    if (<PostsDetailsCommentsRecords>[] is M) {
      return data.map<PostsDetailsCommentsRecords>((Map<String, dynamic> e) => PostsDetailsCommentsRecords.fromJson(e))
          .toList() as M;
    }
    if (<PostsDetailsCommentsRecordsCommentsReplyList>[] is M) {
      return data.map<PostsDetailsCommentsRecordsCommentsReplyList>((Map<String, dynamic> e) =>
          PostsDetailsCommentsRecordsCommentsReplyList.fromJson(e)).toList() as M;
    }
    if (<PostsDetailsModel>[] is M) {
      return data.map<PostsDetailsModel>((Map<String, dynamic> e) => PostsDetailsModel.fromJson(e)).toList() as M;
    }
    if (<PostsHotRecommendListModel>[] is M) {
      return data.map<PostsHotRecommendListModel>((Map<String, dynamic> e) => PostsHotRecommendListModel.fromJson(e))
          .toList() as M;
    }
    if (<PostsHotRecommendListRecords>[] is M) {
      return data.map<PostsHotRecommendListRecords>((Map<String, dynamic> e) =>
          PostsHotRecommendListRecords.fromJson(e)).toList() as M;
    }
    if (<PostsHotRecommendModel>[] is M) {
      return data.map<PostsHotRecommendModel>((Map<String, dynamic> e) => PostsHotRecommendModel.fromJson(e))
          .toList() as M;
    }
    if (<PostsRewardOptionsModel>[] is M) {
      return data.map<PostsRewardOptionsModel>((Map<String, dynamic> e) => PostsRewardOptionsModel.fromJson(e))
          .toList() as M;
    }
    if (<GroupListModel>[] is M) {
      return data.map<GroupListModel>((Map<String, dynamic> e) => GroupListModel.fromJson(e)).toList() as M;
    }
    if (<GroupMemberInviteModel>[] is M) {
      return data.map<GroupMemberInviteModel>((Map<String, dynamic> e) => GroupMemberInviteModel.fromJson(e))
          .toList() as M;
    }
    if (<GroupMemberListModel>[] is M) {
      return data.map<GroupMemberListModel>((Map<String, dynamic> e) => GroupMemberListModel.fromJson(e)).toList() as M;
    }
    if (<CustomEmojiModel>[] is M) {
      return data.map<CustomEmojiModel>((Map<String, dynamic> e) => CustomEmojiModel.fromJson(e)).toList() as M;
    }
    if (<CustomEmojiEmoticonsInfoList>[] is M) {
      return data.map<CustomEmojiEmoticonsInfoList>((Map<String, dynamic> e) =>
          CustomEmojiEmoticonsInfoList.fromJson(e)).toList() as M;
    }
    if (<NoticeDetailsModel>[] is M) {
      return data.map<NoticeDetailsModel>((Map<String, dynamic> e) => NoticeDetailsModel.fromJson(e)).toList() as M;
    }
    if (<NoticeListModel>[] is M) {
      return data.map<NoticeListModel>((Map<String, dynamic> e) => NoticeListModel.fromJson(e)).toList() as M;
    }
    if (<SystemMessageModel>[] is M) {
      return data.map<SystemMessageModel>((Map<String, dynamic> e) => SystemMessageModel.fromJson(e)).toList() as M;
    }
    if (<CollectionDetailsModel>[] is M) {
      return data.map<CollectionDetailsModel>((Map<String, dynamic> e) => CollectionDetailsModel.fromJson(e))
          .toList() as M;
    }
    if (<CollectionDetailsRecords>[] is M) {
      return data.map<CollectionDetailsRecords>((Map<String, dynamic> e) => CollectionDetailsRecords.fromJson(e))
          .toList() as M;
    }
    if (<CollectionMessageListModel>[] is M) {
      return data.map<CollectionMessageListModel>((Map<String, dynamic> e) => CollectionMessageListModel.fromJson(e))
          .toList() as M;
    }
    if (<CollectionMessageListRecords>[] is M) {
      return data.map<CollectionMessageListRecords>((Map<String, dynamic> e) =>
          CollectionMessageListRecords.fromJson(e)).toList() as M;
    }
    if (<CollectionMessageListRecordsSearchMessageList>[] is M) {
      return data.map<CollectionMessageListRecordsSearchMessageList>((Map<String, dynamic> e) =>
          CollectionMessageListRecordsSearchMessageList.fromJson(e)).toList() as M;
    }
    if (<GetRedPacketListModel>[] is M) {
      return data.map<GetRedPacketListModel>((Map<String, dynamic> e) => GetRedPacketListModel.fromJson(e))
          .toList() as M;
    }
    if (<GetRedPacketListRecords>[] is M) {
      return data.map<GetRedPacketListRecords>((Map<String, dynamic> e) => GetRedPacketListRecords.fromJson(e))
          .toList() as M;
    }
    if (<GetRedPacketTotalModel>[] is M) {
      return data.map<GetRedPacketTotalModel>((Map<String, dynamic> e) => GetRedPacketTotalModel.fromJson(e))
          .toList() as M;
    }
    if (<IsReceiveRedPacketModel>[] is M) {
      return data.map<IsReceiveRedPacketModel>((Map<String, dynamic> e) => IsReceiveRedPacketModel.fromJson(e))
          .toList() as M;
    }
    if (<ReceiveRedPacketModel>[] is M) {
      return data.map<ReceiveRedPacketModel>((Map<String, dynamic> e) => ReceiveRedPacketModel.fromJson(e))
          .toList() as M;
    }
    if (<RedPacketDetailModel>[] is M) {
      return data.map<RedPacketDetailModel>((Map<String, dynamic> e) => RedPacketDetailModel.fromJson(e)).toList() as M;
    }
    if (<RedPacketGetReceiversModel>[] is M) {
      return data.map<RedPacketGetReceiversModel>((Map<String, dynamic> e) => RedPacketGetReceiversModel.fromJson(e))
          .toList() as M;
    }
    if (<RedPacketGetReceiversRecords>[] is M) {
      return data.map<RedPacketGetReceiversRecords>((Map<String, dynamic> e) =>
          RedPacketGetReceiversRecords.fromJson(e)).toList() as M;
    }
    if (<RedPacketSettingModel>[] is M) {
      return data.map<RedPacketSettingModel>((Map<String, dynamic> e) => RedPacketSettingModel.fromJson(e))
          .toList() as M;
    }
    if (<SendGroupRedPacketModel>[] is M) {
      return data.map<SendGroupRedPacketModel>((Map<String, dynamic> e) => SendGroupRedPacketModel.fromJson(e))
          .toList() as M;
    }
    if (<SendSingleRedPacketModel>[] is M) {
      return data.map<SendSingleRedPacketModel>((Map<String, dynamic> e) => SendSingleRedPacketModel.fromJson(e))
          .toList() as M;
    }
    if (<SplitRedPacketModel>[] is M) {
      return data.map<SplitRedPacketModel>((Map<String, dynamic> e) => SplitRedPacketModel.fromJson(e)).toList() as M;
    }
    if (<FollowUserListModel>[] is M) {
      return data.map<FollowUserListModel>((Map<String, dynamic> e) => FollowUserListModel.fromJson(e)).toList() as M;
    }
    if (<InviteListModel>[] is M) {
      return data.map<InviteListModel>((Map<String, dynamic> e) => InviteListModel.fromJson(e)).toList() as M;
    }
    if (<InviteListRecords>[] is M) {
      return data.map<InviteListRecords>((Map<String, dynamic> e) => InviteListRecords.fromJson(e)).toList() as M;
    }
    if (<LoginModel>[] is M) {
      return data.map<LoginModel>((Map<String, dynamic> e) => LoginModel.fromJson(e)).toList() as M;
    }
    if (<MemberCodeModel>[] is M) {
      return data.map<MemberCodeModel>((Map<String, dynamic> e) => MemberCodeModel.fromJson(e)).toList() as M;
    }
    if (<MnemonicModel>[] is M) {
      return data.map<MnemonicModel>((Map<String, dynamic> e) => MnemonicModel.fromJson(e)).toList() as M;
    }
    if (<UserDetailModel>[] is M) {
      return data.map<UserDetailModel>((Map<String, dynamic> e) => UserDetailModel.fromJson(e)).toList() as M;
    }
    if (<UserListModel>[] is M) {
      return data.map<UserListModel>((Map<String, dynamic> e) => UserListModel.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (CoinModel).toString(): CoinModel.fromJson,
    (FundsDetailsRecordModel).toString(): FundsDetailsRecordModel.fromJson,
    (FundsDetailsRecordRecords).toString(): FundsDetailsRecordRecords.fromJson,
    (FundsModel).toString(): FundsModel.fromJson,
    (FundsCoinCapitalList).toString(): FundsCoinCapitalList.fromJson,
    (GoogleIsBindModel).toString(): GoogleIsBindModel.fromJson,
    (GoogleQrcodeModel).toString(): GoogleQrcodeModel.fromJson,
    (GoogleSecretKeyModel).toString(): GoogleSecretKeyModel.fromJson,
    (PayoutsAddressListModel).toString(): PayoutsAddressListModel.fromJson,
    (PayoutsAddressListRecords).toString(): PayoutsAddressListRecords.fromJson,
    (PayoutsSetModel).toString(): PayoutsSetModel.fromJson,
    (RechargeAddressModel).toString(): RechargeAddressModel.fromJson,
    (RechargeRecordsModel).toString(): RechargeRecordsModel.fromJson,
    (RechargeRecordsRecords).toString(): RechargeRecordsRecords.fromJson,
    (TransferRecordsModel).toString(): TransferRecordsModel.fromJson,
    (TransferRecordsRecords).toString(): TransferRecordsRecords.fromJson,
    (TransferSetModel).toString(): TransferSetModel.fromJson,
    (WithdrawalRecordsModel).toString(): WithdrawalRecordsModel.fromJson,
    (WithdrawalRecordsRecords).toString(): WithdrawalRecordsRecords.fromJson,
    (ReverseGeocodingResultModel).toString(): ReverseGeocodingResultModel.fromJson,
    (ReverseGeocodingResultResult).toString(): ReverseGeocodingResultResult.fromJson,
    (ReverseGeocodingResultResultAddressComponent).toString(): ReverseGeocodingResultResultAddressComponent.fromJson,
    (CaptchaImageModel).toString(): CaptchaImageModel.fromJson,
    (EmptyModel).toString(): EmptyModel.fromJson,
    (LaunchSplashModel).toString(): LaunchSplashModel.fromJson,
    (TestModel).toString(): TestModel.fromJson,
    (UploadSignModel).toString(): UploadSignModel.fromJson,
    (VersionListModel).toString(): VersionListModel.fromJson,
    (CommentsReplyListModel).toString(): CommentsReplyListModel.fromJson,
    (CommentsReplyListRecords).toString(): CommentsReplyListRecords.fromJson,
    (DraftBoxListModel).toString(): DraftBoxListModel.fromJson,
    (DraftBoxListRecords).toString(): DraftBoxListRecords.fromJson,
    (GetPostsCountModel).toString(): GetPostsCountModel.fromJson,
    (HotTopPostsListModel).toString(): HotTopPostsListModel.fromJson,
    (HotTopPostsListRecords).toString(): HotTopPostsListRecords.fromJson,
    (LookHistoryPostsModel).toString(): LookHistoryPostsModel.fromJson,
    (LookHistoryPostsRecords).toString(): LookHistoryPostsRecords.fromJson,
    (PostsDetailsCommentsModel).toString(): PostsDetailsCommentsModel.fromJson,
    (PostsDetailsCommentsRecords).toString(): PostsDetailsCommentsRecords.fromJson,
    (PostsDetailsCommentsRecordsCommentsReplyList).toString(): PostsDetailsCommentsRecordsCommentsReplyList.fromJson,
    (PostsDetailsModel).toString(): PostsDetailsModel.fromJson,
    (PostsHotRecommendListModel).toString(): PostsHotRecommendListModel.fromJson,
    (PostsHotRecommendListRecords).toString(): PostsHotRecommendListRecords.fromJson,
    (PostsHotRecommendModel).toString(): PostsHotRecommendModel.fromJson,
    (PostsRewardOptionsModel).toString(): PostsRewardOptionsModel.fromJson,
    (GroupListModel).toString(): GroupListModel.fromJson,
    (GroupMemberInviteModel).toString(): GroupMemberInviteModel.fromJson,
    (GroupMemberListModel).toString(): GroupMemberListModel.fromJson,
    (CustomEmojiModel).toString(): CustomEmojiModel.fromJson,
    (CustomEmojiEmoticonsInfoList).toString(): CustomEmojiEmoticonsInfoList.fromJson,
    (NoticeDetailsModel).toString(): NoticeDetailsModel.fromJson,
    (NoticeListModel).toString(): NoticeListModel.fromJson,
    (SystemMessageModel).toString(): SystemMessageModel.fromJson,
    (CollectionDetailsModel).toString(): CollectionDetailsModel.fromJson,
    (CollectionDetailsRecords).toString(): CollectionDetailsRecords.fromJson,
    (CollectionMessageListModel).toString(): CollectionMessageListModel.fromJson,
    (CollectionMessageListRecords).toString(): CollectionMessageListRecords.fromJson,
    (CollectionMessageListRecordsSearchMessageList).toString(): CollectionMessageListRecordsSearchMessageList.fromJson,
    (GetRedPacketListModel).toString(): GetRedPacketListModel.fromJson,
    (GetRedPacketListRecords).toString(): GetRedPacketListRecords.fromJson,
    (GetRedPacketTotalModel).toString(): GetRedPacketTotalModel.fromJson,
    (IsReceiveRedPacketModel).toString(): IsReceiveRedPacketModel.fromJson,
    (ReceiveRedPacketModel).toString(): ReceiveRedPacketModel.fromJson,
    (RedPacketDetailModel).toString(): RedPacketDetailModel.fromJson,
    (RedPacketGetReceiversModel).toString(): RedPacketGetReceiversModel.fromJson,
    (RedPacketGetReceiversRecords).toString(): RedPacketGetReceiversRecords.fromJson,
    (RedPacketSettingModel).toString(): RedPacketSettingModel.fromJson,
    (SendGroupRedPacketModel).toString(): SendGroupRedPacketModel.fromJson,
    (SendSingleRedPacketModel).toString(): SendSingleRedPacketModel.fromJson,
    (SplitRedPacketModel).toString(): SplitRedPacketModel.fromJson,
    (FollowUserListModel).toString(): FollowUserListModel.fromJson,
    (InviteListModel).toString(): InviteListModel.fromJson,
    (InviteListRecords).toString(): InviteListRecords.fromJson,
    (LoginModel).toString(): LoginModel.fromJson,
    (MemberCodeModel).toString(): MemberCodeModel.fromJson,
    (MnemonicModel).toString(): MnemonicModel.fromJson,
    (UserDetailModel).toString(): UserDetailModel.fromJson,
    (UserListModel).toString(): UserListModel.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}